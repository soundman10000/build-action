name: Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '*'
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Restore dependencies
      run: dotnet restore useless-stuff

    - name: Build
      run: dotnet build useless-stuff --configuration Release --no-restore

    # If the tests fail this will just exit the process
    - name: Test
      run: dotnet test useless-stuff-tests --no-restore --verbosity normal

    - name: Install jq, Setup, Determine, and Parse Version
      if: github.ref == 'refs/heads/main'
      id: gitversion
      run: |
        sudo apt-get update
        sudo apt-get install -y jq || { echo "Failed to install jq"; exit 1; }
        
        dotnet tool install --global GitVersion.Tool --version 5.* || { echo "Failed to install GitVersion"; exit 1; }
        
        output=$(dotnet gitversion 2>&1)
        if [ $? -ne 0 ]; then
          echo "Failed to determine version with GitVersion"
          exit 1
        fi
        
        version_info=$(echo "$output" | jq '.')
        version=$(echo "$version_info" | jq -r '.MajorMinorPatch')
        
        echo "version_info<<EOF" >> $GITHUB_OUTPUT
        echo "$version_info" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        echo "version=$version" >> $GITHUB_OUTPUT
      shell: bash

    - name: Create Tag
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git tag -a "v${{ steps.parse_version.outputs.version }}" -m "Release version ${{ steps.parse_version.outputs.version }}"
        git push origin "v${{ steps.parse_version.outputs.version }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
